buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'java'
    id 'application'
    id "com.github.johnrengelman.shadow" version "4.0.3"
    id 'com.github.sherter.google-java-format' version '0.8'
    id "nebula.ospackage" version "5.2.0" apply false
}

apply plugin: "nebula.rpm"

repositories {
    jcenter()
}

group = 'com.johnathangilday'
version = '0.0.6'

mainClassName = "com.johnathangilday.App"

ext {
    versions = [
            jackson: '2.8.10',
            jersey : '2.27',
            jetty  : '9.4.7.v20170914',
            junit  : '4.12'
    ]
}


dependencies {

    compile fileTree(dir: 'lib', include: '*.jar')

    // To avoid compiler warnings about @API annotations in JUnit code.
    compile('org.apiguardian:apiguardian-api:1.0.0')

    // jackson
    compile "com.fasterxml.jackson.core:jackson-core:$versions.jackson"
    compile "com.fasterxml.jackson.core:jackson-databind:$versions.jackson"
    compile "com.fasterxml.jackson.module:jackson-module-parameter-names:$versions.jackson"
    // jersey
    compile "org.glassfish.jersey.core:jersey-server:$versions.jersey"
    compile "org.glassfish.jersey.inject:jersey-hk2:$versions.jersey"
    compile("org.glassfish.jersey.containers:jersey-container-jetty-http:$versions.jersey")
    compile("org.glassfish.jersey.media:jersey-media-json-jackson:$versions.jersey") {
        exclude group: 'com.fasterxml.jackson.core'
    }
    // jetty
    compile "org.eclipse.jetty:jetty-server:$versions.jetty"
    // slf4j
    compile 'org.slf4j:slf4j-api:1.7.22'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    // typesafe config
    compile 'com.typesafe:config:1.3.1'

    // jaxb (no longer in JDK)
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.4.0-b180830.0438'

    // test
//    testCompile "org.junit.jupiter:junit-jupiter-api:$versions.junit"
//    testRuntime "org.junit.jupiter:junit-jupiter-engine:$versions.junit"
    testCompile "junit:junit:$versions.junit"
    testCompile 'org.assertj:assertj-core:3.6.1'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile("org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jdk-http:$versions.jersey") {
        exclude group: 'javax.servlet'
        exclude group: 'junit'
    }
    testCompile "org.glassfish.jersey.containers:jersey-container-jdk-http:$versions.jersey"
}

compileJava {
    options.compilerArgs = ["-parameters"]
}

shadowJar {
    mergeServiceFiles()
}

task rpm(type: Rpm) {
    it.dependsOn shadowJar

    packageName = project.name
    version = project.version
    release = '1.e7'
    os = LINUX

    requires('java-11-openjdk')

    preInstall file('packaging/add-user.sh')
    postInstall "systemctl preset ${project.name} > /dev/null 2>&1"
    preUninstall "systemctl disable ${project.name} > /dev/null 2>&1" + '\n' +
            "systemctl stop ${project.name} > /dev/null 2>&1"
    postUninstall "systemctl daemon-reload > /dev/null 2>&1"

    from('build/libs') {
        into "/opt/${project.name}"
        include "${project.name}-${project.version}.jar"
        user 'howtomicroservice'
        permissionGroup 'howtomicroservice'
        fileMode = 0644
    }

    from('packaging') {
        into '/etc/systemd/system'
        include '*.service'
        addParentDirs false
        expand project.properties
        user 'root'
        permissionGroup 'root'
        fileMode = 0644
    }

    from('packaging') {
        into "/etc/${project.name}"
        include 'settings.conf'
        user 'howtomicroservice'
        permissionGroup 'howtomicroservice'
        fileMode = 0644
    }

    from('packaging') {
        into '/etc/sysconfig'
        include "${project.name}"
        user 'root'
        permissionGroup 'root'
        fileMode = 0644
    }

    link("/opt/${project.name}/settings.conf", "/etc/${project.name}/settings.conf")
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
