group = 'com.johnathangilday'
version = '0.0.2-SNAPSHOT'

repositories {
     jcenter()
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:3.1.0'
    }
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'nebula.rpm'

ext {
    versions = [
            jackson: '2.6.3',
            jersey: '2.22.1',
            jetty: '9.1.1.v20140108'
    ]
}


dependencies {

    // jackson
    compile  "com.fasterxml.jackson.core:jackson-core:$versions.jackson"
    compile  "com.fasterxml.jackson.core:jackson-databind:$versions.jackson"
    // jersey
    compile  "org.glassfish.jersey.core:jersey-server:$versions.jersey"
    compile ("org.glassfish.jersey.containers:jersey-container-jetty-http:$versions.jersey")
    compile ("org.glassfish.jersey.media:jersey-media-json-jackson:$versions.jersey") {
        exclude group: 'com.fasterxml.jackson.core'
    }
    // jetty
    compile "org.eclipse.jetty:jetty-server:$versions.jetty"
    // slf4j
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    // typesafe config
    compile 'com.typesafe:config:1.3.0'

    // test
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.1.0'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile ("org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jdk-http:$versions.jersey") {
        exclude group: 'junit'
        exclude group: 'javax.servlet'
    }
    testCompile "org.glassfish.jersey.containers:jersey-container-jdk-http:$versions.jersey"
}

jar {
    manifest {
        attributes("Main-Class": "com.johnathangilday.App")
    }
}

shadowJar {
    mergeServiceFiles()
}

task rpm(type: Rpm) {
    it.dependsOn shadowJar

    packageName = project.name
    version = '0.0.1'
    release = '1.e7'
    os = LINUX

    requires('java-1.8.0-openjdk')

    preInstall file('packaging/add-user.sh')
    postInstall   "systemctl preset ${project.name} > /dev/null 2>&1"
    preUninstall  "systemctl disable ${project.name} > /dev/null 2>&1" + '\n' +
            "systemctl stop ${project.name} > /dev/null 2>&1"
    postUninstall "systemctl daemon-reload > /dev/null 2>&1"

    from('build/libs') {
        into "/opt/${project.name}"
        include '*-all.jar'
        user 'howtomicroservice'
        permissionGroup 'howtomicroservice'
        fileMode = 0644
    }

    from('packaging') {
        into '/etc/systemd/system'
        include '*.service'
        addParentDirs false
        expand project.properties
        user 'root'
        permissionGroup 'root'
        fileMode = 0644
    }

    from('packaging') {
        into "/etc/${project.name}"
        include 'settings.conf'
        user 'howtomicroservice'
        permissionGroup 'howtomicroservice'
        fileMode = 0644
    }

    from('packaging') {
        into '/etc/sysconfig'
        include "${project.name}"
        user 'root'
        permissionGroup 'root'
        fileMode = 0644
    }

    link("/opt/${project.name}/settings.conf", "/etc/${project.name}/settings.conf")
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

task(run, dependsOn: 'classes', type: JavaExec) {
    main = "com.johnathangilday.App"
    classpath = sourceSets.main.runtimeClasspath
}

